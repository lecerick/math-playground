"""
Problem #12
----------------
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from p003_largest_prime_factor import smallestPrimeFactor

def primeFactorization(N):
    # returns a list of all prime factors of N
    primefactors = []
    i = N
    while i>1:
        prime = smallestPrimeFactor(i)
        if primefactors.count(prime)==0:
            primefactors.append(prime)
        i = i // prime
    return primefactors

def numDivisors(N):
    primefactors = primeFactorization(N)
    count = 1
    for i in range(0,len(primefactors)):
        p = primefactors[i]
        power = 0
        temp = N
        while temp % p == 0:
            power+=1
            temp = temp // p
        count *= (power+1)
    return count

def triangleNumber(min_divisor_count):
    n = 1
    trin = 1
    while True:
        if numDivisors(trin)>=min_divisor_count:
            return trin
        #calculate the next triangle number 
        n+=1
        trin+=n

# print(primeFactorization(13195))
# print(numDivisors(3000))
print(triangleNumber(5))
print(triangleNumber(500))